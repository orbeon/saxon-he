<?xml version="1.0" encoding="UTF-8"?>

<project basedir="." default="all" name="Saxon for the Java platform"
    xmlns:dn="antlib:org.apache.ant.dotnet" xmlns:if="ant:if" xmlns:unless="ant:unless">
    <!-- The use of ant:if and ant:unless requires Ant 1.9.1 -
        for IntelliJ the built-in is 1.8.2, but an external Ant can be configured on the Ant menu  -->

    <!-- Build file for Saxon on the Java platform. This build file is
         designed to be imported from build.xml -->

    <import file="build-constants.xml"/>

    <!-- <import file="documentation.xml"/> -->

    <!-- The source preprocessor - see https://code.google.com/p/java-comment-preprocessor/wiki/UsageFromAnt -->
    <!-- <taskdef resource="com/igormaznitsa/jcp/ant/tasks.properties" classpath="${lib.dir}/jcp-5.3.jar"/>   -->

    <!-- following locations are relative to the build file -->

    <property name="services.dir" value="services"/>
    <property name="temp-src-j.dir" value="${temp.dir}/j/source"/>
    <property name="temp-src-prep0-hej.dir" value="${temp.dir}/preprocessed0/hej/source"/>
    <property name="temp-src-prep-hej.dir" value="${temp.dir}/preprocessed/hej/source"/>
    <property name="temp-src-prep-test.dir" value="${temp.dir}/preprocessed/testdriver"/>
    <property name="classes-j.dir" value="${temp.dir}/j/classes"/>

    <!-- following locations are relative to the destination directory -->

    <property name="build-hej.dir" value="${product.dir}/hej"/>
    

    <property name="javadoc.dir" value="${build-resources.dir}/doc/javadoc"/>


    <path id="classpath-j">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>


    <path id="classpath-samples">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${build-hej.dir}">
            <include name="*.jar"/>
        </fileset>

    </path>


    <target name="create-meta-inf" description="Create contents of META-INF/services files">

        <!-- given the Ant 1.7.0 bug, create the services files here for copying into the JARS -->
        <mkdir dir="${services.dir}/saxon-he/META-INF/services"/>
        <echo
            file="${services.dir}/saxon-he/META-INF/services/javax.xml.transform.TransformerFactory"
            message="net.sf.saxon.TransformerFactoryImpl"/>
        <mkdir dir="${services.dir}/saxon-he/META-INF/services"/>
        <!-- The peculiar format of these files is due to the bug described at
             http://markmail.org/message/obgfqbnrkuhzl6wl. The correct format is
             just to use the first line: this works for JDK 1.6. But JDK 1.5 incorrectly
             expects a properties file, in the form of the subsequent line. The combination
             works with both Java releases -->
        <!-- See also Saxon bug 1944.
             Decided that from 9.6 we will drop the services information for XPath.
        echo file="${services.dir}/saxon9he/META-INF/services/javax.xml.xpath.XPathFactory"
>net.sf.saxon.xpath.XPathFactoryImpl
http\://java.sun.com/jaxp/xpath/dom:    net.sf.saxon.xpath.XPathFactoryImpl
http\://saxon.sf.net/jaxp/xpath/om:     net.sf.saxon.xpath.XPathFactoryImpl
</echo>-->

    </target>

    <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask"
                   classpath="${lib.dir}/jarjar-1.4.jar"/>

    <target name="prepare-j" depends="create-meta-inf" />



    <target name="copysource-development-j"
        description="Copy relevant source files from development directory">

    </target>



    <target name="copysrc-hej">
        <mkdir dir="${temp-src-j.dir}/hej"/>
        <copy todir="${temp-src-j.dir}/hej">
            <fileset dir="${source-hej.dir}">
                <include name="net/sf/saxon/**/*.java"/>
                <exclude name="javax/xml/xquery/*.java"/>
                <exclude name="**/dotnet/**"/>
                <include name="net/sf/saxon/**/package.html"/>
                <exclude name="net/sf/saxon/testdriver/**"/>
                <exclude name="net/sf/saxon/option/sql/**"/>
                <exclude name="net/sf/saxon/option/cpp/**"/>
                <exclude name="net/sf/saxon/jetonnet/**"/>
                <include name="net/sf/saxon/data/**"/>
            </fileset>

            
        </copy>
      
        
    </target>

 

    <target name="preprocess-hej" depends="copysrc-hej">
        <preprocess source="${temp-src-j.dir}/hej" destination="${temp-src-prep0-hej.dir}"
            verbose="false">
            <global name="EE" value="false"/>
            <global name="PE" value="false"/>
            <global name="DOTNET" value="false"/>
            <global name="OPT" value="false"/>
            <global name="SAXONC" value="false"/>
            <global name="BYTECODE" value="false"/>
        </preprocess>
        <echo>Preprocessing hej complete.</echo>
        <copy todir="${temp-src-prep-hej.dir}">
           <fileset dir="${temp-src-prep0-hej.dir}"/>
           <filterchain>
              <linecontains negate="true">
                 <contains value="import com.saxonica"/>
              </linecontains>
           </filterchain>
       </copy>
        <!-- Bug fix relating to issue #4272 -->
        <copy todir="${temp-src-prep-hej.dir}">
            <fileset dir="${source-hej.dir}">
                <include name="net/sf/saxon/data/**"/>
            </fileset>
        </copy>

        <echo>Import filtering for hej complete!</echo>
    </target>

    

    <tstamp>
         <format property="time.stamp" pattern="yyyymmdd" locale="en,GB"/>
    </tstamp>

    

    <target name="compile-hej" description="Compile Saxon classes for the Java opensource product."
        depends="copysource-development-j, preprocess-hej">
        <mkdir dir="${classes-j.dir}/he"/>

        <javac debug="${build.debug}" debuglevel="${build.debuglevel}"
            deprecation="${build.deprecation}" destdir="${classes-j.dir}/he"
            optimize="${build.optimize}" srcdir="${temp-src-prep-hej.dir}"
            source="${build.compiler.source}" target="${build.compiler.target}" fork="true"
            memoryinitialsize="256m" memorymaximumsize="256m">

            <include name="net/**"/>
            <exclude name="net/sf/saxon/option/**/*.java"/>

            <classpath>
                <path refid="classpath-j"/>
            </classpath>
        </javac>
    </target>


   
    <target name="jar-hej" description="Create Saxon-HE jar files for Java" depends="testdrivers-j, compile-hej">
        <mkdir dir="${product.dir}/hej"/>
        <mkdir dir="${classes-j.dir}/he"/>

        <jar basedir="${classes-j.dir}/he" compress="${build.compress}"
            jarfile="${product.dir}/hej/saxon-he-${major.version}.jar">
            <include name="net/**/*.class"/>
            <exclude name="net/sf/saxon/option/**/*.class"/>
            <include name="META-INF/**"/>
            <manifest>
                <attribute name="Project-Name" value="Saxon-HE"/>
                <attribute name="Main-Class" value="net.sf.saxon.Transform"/>
            </manifest>
            <metainf dir="${services.dir}/saxon-he/META-INF"/>
        </jar>

        <!-- add data files -->
        <jar basedir="${temp-src-j.dir}/hej" compress="${build.compress}"
             jarfile="${product.dir}/hej/saxon-he-${major.version}.jar" update="true">
            <include name="net/sf/saxon/data/**"/>
        </jar>

        <mkdir dir="${product.dir}/resources/drivers/java/classes"/>
        <javac debug="true" debuglevel="${build.debuglevel}"
               destdir="${product.dir}/resources/drivers/java/classes"
               srcdir="${product.dir}/resources/drivers/java" source="${build.compiler.source}"
               target="${build.compiler.target}">
            <include name="net/sf/saxon/testdriver/*.java"/>
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="${build-hej.dir}">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </javac>


        <copyfile dest="${product.dir}/resources/drivers/java/classes/com/saxonica/testdriver/gui/images/saxonica_logo.gif" src="${product.dir}/resources/drivers/java/com/saxonica/testdriver/gui/images/saxonica_logo.gif" />

        <!-- saxon9-test.jar -->
        <jar basedir="${product.dir}/resources/drivers/java/classes" compress="${build.compress}"
            jarfile="${product.dir}/hej/saxon-he-test-${major.version}.jar">
            <include name="net/sf/saxon/testdriver/*.class"/>
            <!--<include name="com/saxonica/testdriver/gui/*.class"/>-->
            <manifest>
                <attribute name="Project-Name" value="Saxon-HE-TestDriver"/>
                <attribute name="Main-Class" value="com.saxonica.testdriver.gui.TestDriverGui"/>
            </manifest>
        </jar>

         <jar basedir="${classes-j.dir}/ee" compress="${build.compress}" jarfile="${product.dir}/hej/saxon-xqj-${major.version}.jar">
            <include name="com/saxonica/xqj/**/*.class"/>
            <include name="javax/xml/xquery/**/*.class"/>
        </jar>
      
      <!-- Include the JLine 2 jar separately -->
      <copy file="${lib.dir}/jline-2.9.jar" todir="${product.dir}/hej" />

    </target>

 
    
    <target name="jar-j" depends="jar-hej"/>

    <target name="samples-j" description="Copy and Compile Java Samples"
        depends="samples-common">
        <mkdir dir="${product.dir}/resources/samples/java/he"/>
        <mkdir dir="${product.dir}/resources/samples/java/classes/he"/>
        <mkdir dir="${product.dir}/resources/samples/java/ee"/>
        <mkdir dir="${product.dir}/resources/samples/java/classes/ee"/>
        <copy todir="${product.dir}/resources/samples/java/he">
            <fileset dir="${samples.dir}/java/he">
                <include name="ApplyXPathJAXP.java"/>
                <include name="ExampleContentHandler.java"/>
                <include name="QueryAPIExamples.java"/>
                <include name="S9APIExamples.java"/>
                <include name="S9APIExamplesOM.java"/>
                <include name="SaxonServlet.java"/>
                <include name="JAXPExamples.java"/>
                <include name="XPathExample.java"/>
                <include name="XPathExampleDOM.java"/>
                <include name="XPathExampleServlet.java"/>
            </fileset>
        </copy>
        <javac debug="true" debuglevel="${build.debuglevel}"
            destdir="${product.dir}/resources/samples/java/classes"
            srcdir="${product.dir}/resources/samples/java/he" source="${build.compiler.source}"
            target="${build.compiler.target}" includeantruntime="false">
            <include name="*.java"/>
            <classpath>
                <path refid="classpath-samples"/>
            </classpath>
        </javac>
        <copy todir="${product.dir}/resources/samples/java/ee">
            <fileset dir="${samples.dir}/java/ee">
                <include name="JDOM2Example.java"/>
                <include name="PullExamples.java"/>
                <include name="QuickValidator.java"/>
                <include name="SaxonSAServlet.java"/>
                <include name="SchemaValidatorExample.java"/>
                <include name="SchemaValidatorHandlerExample.java"/>
                <include name="XMarkBenchmark.java"/>
                <include name="XPathExampleSA.java"/>
                <include name="XQJExamples.java"/>
            </fileset>
        </copy>
        <javac debug="true" debuglevel="${build.debuglevel}"
               destdir="${product.dir}/resources/samples/java/classes"
               srcdir="${product.dir}/resources/samples/java/ee" source="${build.compiler.source}"
               target="${build.compiler.target}" includeantruntime="false">
            <include name="*.java"/>
            <classpath>
                <path refid="classpath-samples"/>
            </classpath>
        </javac>
    </target>


    <target name="preprocess-testdriver-j">
       
        <echo>Preprocessing test-driver-hej complete!</echo>
    </target>

    <target name="testdrivers-j" description="Copy Java Test Drivers">
        <mkdir dir="${product.dir}/resources/drivers/java"/>

        <copy todir="${product.dir}/resources/drivers/java">

            <fileset dir="${source-hej.dir}">
                  <include name="net/sf/saxon/testdriver/*.java"/>
            </fileset>
        </copy>

    </target>

    <!-- Builds the HTML javadoc in resources/doc/javadoc dir -->
    <target name="product-javadoc" description="Generate Javadoc"
        depends="copysource-development-j">
        <javadoc bottom="Copyright (c) 2004-2020 Saxonica Limited. All rights reserved."
            destdir="${javadoc.dir}" doctitle="Saxon ${major.version} Java API Documentation" noindex="false"
            notree="false" access="protected" maxmemory="512M" source="1.8">
            <!--<packageset dir="${repository}/lib/xqj-final/ri/src"/>-->
            <classpath>
                <path refid="classpath-j"/>
            </classpath>

            <link href="http://download.oracle.com/javase/6/docs/api/"/>
            <link href="http://www.xom.nu/apidocs/"/>

            <group title="s9api Interface" packages="net.sf.saxon.s9api"/>
            <group title="Other Interfaces">
                <package name="net.sf.saxon"/>
                <package name="net.sf.saxon.lib"/>
                <package name="net.sf.saxon.om"/>
                <package name="net.sf.saxon.query"/>
                <package name="net.sf.saxon.sxpath"/>
                <package name="net.sf.saxon.value"/>
                <package name="net.sf.saxon.type"/>
                <package name="net.sf.saxon.xpath"/>
                <package name="net.sf.saxon.xqj"/>
                <package name="com.saxonica.config"/>
                <package name="com.saxonica.jaxp"/>
                <package name="com.saxonica.schema"/>

            </group>
            <group title="External Interfaces">
                <package name="javax.xml.xquery"/>
            </group>
        </javadoc>
        <copy file="${userdoc.dir}/saxon9/fixed/javadoc/stylesheet.css"
            tofile="${javadoc.dir}/stylesheet.css" overwrite="true"/>
    </target>


    <target name="j" depends="jar-j, copy-notices"
        description="Generate Saxon (all three editions) for the Java platform"/>

    <target name="release-j" description="Create .ZIP files for release" depends="j">
        <!-- , test-j -->
        <mkdir dir="${issue.dir}"/>
        <zip zipfile="${issue.dir}/SaxonHE${versionh}J.zip">
            <fileset dir="${product.dir}/hej"/>
        </zip>

    </target>


</project>
