<?xml version="1.0" encoding="utf-8"?>
<article id="samples" title="Saxon/C Samples">
   <h1>Saxon/C Samples</h1>

   <p>This section of the documentation describes some example code in C/C++, PHP and Python to help
      users to get started. A number of samples and unit test code for C/C++ and PHP can be found in
      the 'samples' directory of the Saxon/C installation. Samples and unit tests for Python can be
      found in the 'Saxon.C.API/python-saxon' directory.</p>

   <nav>
      <ul/>
   </nav>

   <section id="samples_c" title="C/C++ Samples">
      <h1>C/C++ Samples</h1>

      <h2 class="subtitle">C programming</h2>

      <p>The 'samples/cTests' directory in the Saxon/C download contains the test harnesses for
         XSLT, XQuery and XPath in C code, along with the build and run scripts.
         These tests provide various examples of the use of the Saxon/C API.</p>

      <p>To build Saxon/C on C, the following files are required: SaxonCGlue.c, SaxonXProcessor.c
         and SaxonCXPath.c. To compile the sample test code in C execute the 'build.sh' file in the
         'samples/cTests' directory. This script builds the test harness executables, using a
         command similar to the following:</p>

      <kbd>gcc -m32 -I$jdkdir/include -I$jdkdir/include/linux -I
         /System/Library/Frameworks/JavaVM.framework/Headers ../SaxonCGlue.c ../SaxonCProcessor.c
         ../SaxonCXPath.c testXSLT.c -o testXSLT -ldl -lc $1</kbd>
      
      <p>To run the executables from the commandline, use a command such as:</p>
      
      <kbd>./testXSLT</kbd>


      <h2 class="subtitle">C++ programming</h2>

      <p>The 'samples/cppTests' directory in the Saxon/C download contains the test harnesses for
         XSLT, XQuery, XPath and Schema Validation in C++ code, along with the build and run
         scripts. These tests provide various examples of the use of the Saxon/C API.</p>

      <p>To build Saxon/C on C++, the following files are required: SaxonCGlue.c, SaxonCXPath.c,
         XdmValue.cpp, XdmItem.cpp, XdmNode.cpp, XdmAtomicValue.cpp, SaxonProcessor.cpp,
         XsltProcessor.cpp, Xslt30Processor.cpp, XQueryProcessor.cpp, XPathProcessor.cpp and
         SchemaValidator.cpp. To compile the sample test code in C++ execute the
         'build64-[PLATFORM].sh' file in the 'samples/cTests' directory for Linux and Mac OS, or the
         'buildCPPSaxon[EDITION].bat' file for Windows. These build files build the test harness
         executables, using a command similar to the following:</p>

      <kbd>g++ -m32 ../bin/SaxonCGlue.o ../bin/SaxonCXPath.o ../bin/SaxonProcessor.o
         ../bin/XQueryProcessor.o ../bin/XsltProcessor.o, ../bin/Xslt30Processor.o
         ../bin/XPathProcessor.o ../bin/XdmValue.o ../bin/XdmItem.o ../bin/XdmNode.o
         ../bin/XdmAtomicValue.o ../bin/SchemaValidator.o testXSLT.cpp -o testXSLT -ldl -lc</kbd>

      <p>The executables created for Linux and Mac OS can be run from the commandline using the
         follow commands:</p>

      <kbd>./testXSLT</kbd>
      <kbd>./testXSLT30</kbd>
      <kbd>./testXQuery</kbd>
      <kbd>./testXPath</kbd>
      <kbd>./testValidator</kbd>

      <p>Similarly on Windows the .exe files created can be run from the commandline using the
         following commands:</p>
      
      <kbd>testXSLT.exe</kbd>
      <kbd>testXSLT30.exe</kbd>
      <kbd>testXQuery.exe</kbd>
      <kbd>testXPath.exe</kbd>
      <kbd>testValidator.exe</kbd>

      <h3 class="subtitle">Example code</h3>

      <p>C++ Example 1: basic XSLT transformation</p>
      
      <samp><![CDATA[SaxonProcessor *processor = new SaxonProcessor(true);
XsltProcessor * xslt = processor->newTransformer();
cout<<"Hello World"<<endl;
cout<<"Test output: "<<xslt->transformFileToString("cat.xml","test.xsl")<<endl;
  ]]></samp>

      <p>C++ Example 2: XSLT transformation supplying the value for a stylesheet parameter</p>
      
      <samp><![CDATA[SaxonProcessor * processor = new Saxon\SaxonProcessor(false);
XsltProcessor * xslt = processor->newTransformer();
xslt->setSourceFile("xml/foo.xml");
XdmAtomicValue * xdmvaluex =processor->makeStringValue("Hello to you");
if(xdmvaluex !=NULL){
  cerr<<"xdmvaluex ok"<<endl;
}
xslt->setParameter("a-param", xdmvaluex);
const char * result = test->transformFileToString(NULL, "xsl/foo.xsl");
if(result != NULL) {
  cerr<<result<<endl;
} else {
  cerr<<"Result is NULL"<<endl;
}
processor->clearParameters(true);
processor->clearProperties();
  ]]></samp>

      <p>C++ Example 3: using the <code>Xslt30Processor</code></p>

      <samp><![CDATA[SaxonProcessor * processor = new SaxonProcessor(false);
Xslt30Processor * xslt = processor->newXslt30Transformer();
xslt->setInitialMatchSelectionAsFile("cat.xml");
const char * output = xslt->applyTemplatesReturningString("test.xsl");
if(output !=NULL){
  cerr<< output<<endl;
}
XdmValue * values = new XdmValue(processor);
values->addXdmItem((XdmItem*)processor->makeIntegerValue(10));
values->addXdmItem((XdmItem*)processor->makeIntegerValue(5));
values->addXdmItem((XdmItem*)processor->makeIntegerValue(6));
values->addXdmItem((XdmItem*)processor->makeIntegerValue(7));
xslt->setParameter("values",(XdmValue *)values);
XdmNode * input = processor->parseXmlFromFile("cat.xml");
xslt->setInitialMatchSelection((XdmValue*)input);
xslt->compileFromFile("test2.xsl");
const char * rootValue = trans->callTemplateReturningString(NULL, "main");
if(rootValue != NULL) {
  cerr<<rootValue<<endl;
} else {
  cerr<<"Result is NULL"<<endl;
}
xslt->clearParameters(true);
xslt->clearProperties();
  ]]></samp>


      <p>C++ Example 4: basic XQuery processing</p>

      <samp><![CDATA[SaxonProcessor *processor = new SaxonProcessor(true);
XsltProcessor * xslt = processor->newXQueryProcessor();
queryProc->setProperty("s", "cat.xml");
queryProc->setProperty("q", "family.xq");
queryProc->runQueryToString();
  ]]></samp>

   </section>

   <section id="samples_php" title="PHP Samples">
      <h1>PHP Samples</h1>

      <p>The 'samples/php' directory in the Saxon/C download contains various samples for XSLT,
         XQuery, XPath and Schema Validation (namely: xsltExamples.php, xslt30Examples.php,
         xqueryExamples.php, xpathExamples.php, and validatorExamples.php) and associated files, as
         well as PHP unit tests for XSLT (xslt30_PHPUnit.php). These files contain many useful
         examples which will help get you started. The unit tests run under PHPUnit for PHP 7.2
         which can be downloaded and installed separately in the same directory as the unit
         tests.</p>

      <p>To run the PHP unit tests for XSLT, use a command such as:</p>
      <kbd>cd samples/php</kbd>
      <kbd>./phpunit xslt30_PHPUnit.php</kbd>

      <p>And to run a single unit test:</p>
      <kbd>./phpunit --filter testPipeline xslt30_PHPUnit.php</kbd>

      <h2 class="subtitle">Example code</h2>

      <p>Example using the new XSLT 3.0 API:</p>
      <samp><![CDATA[<?php
  $saxonproc = new Saxon\SaxonProcessor();
  $transformer = $saxonProc->newXslt30Processor();
  $transformer->compileFromString("<xsl:stylesheet version='2.0'" .
      "xmlns:xsl='http://www.w3.org/1999/XSL/Transform'>" .
      "<xsl:template name='go'><a/></xsl:template>" .
      "</xsl:stylesheet>");
  $root = $transformer->callTemplateReturningValue("go");
  $node = $root->getHead()->getNodeValue();
?>]]></samp>

      <p>Example using the older XSLT API:</p>

      <samp><![CDATA[<?php
  $xmlfile = "xml/foo.xml";
  $xslFile = "xsl/foo.xsl";
  $proc = new Saxon\SaxonProcessor();
  $version = $proc->version();
  echo 'Saxon Processor version: '.$version;
  $xsltProc = $saxonProc->newXsltProcessor();
  $xsltProc->setSourceFromFile($xmlfile);
  $xsltProc->compileFromFile($xslFile);
  $result = $xsltProc->transformToString();
  if($result != null) {
    echo 'Output:'.$result;
  } else {
    echo "Result is null";
  }
  $xsltProc->clearParameters();
  $xsltProc->clearProperties();
?> ]]></samp>

      <p>The following example shows how to debug if something unexpected is happening. It is also
         very useful to examine the apache error.log file:</p>

      <samp><![CDATA[<?php
  $xmlfile = "xml/foo.xml";
  $xslFile = "xsl/foo.xsl";
  $proc = new Saxon\SaxonProcessor();
  $xsltProc = $saxonProc->newXsltProcessor();
  $xsltProc->setSourceFromFile($xmlFile);
  $xsltProc->compileFromFile($xslFile);
  $result = $xsltProc->transformToString();
  if($result == NULL) {
    $errCount = $xsltProc->getExceptionCount();
    if($errCount > 0){
      for($i = 0; $i < $errCount; $i++) {
        $errCode = $xsltProc->getErrorCode(intval($i));
        $errMessage = $xsltProc->getErrorMessage(intval($i));
        echo 'Expected error: Code='.$errCode.' Message='.$errMessage;
      }
      $xsltProc->exceptionClear();
    }
  }
  echo $result;
  $xsltProc->clearParameters();
  $xsltProc->clearProperties();
?>]]></samp>
   </section>

   <section id="samples_python" title="Python Samples">
      <h1>Python Samples</h1>

      <p>The 'Saxon.C.API/python-saxon' directory in the Saxon/C download includes the unit test
         files test_saxonc.py and test_saxon_Schema.py, which contain a collection of Python unit
         test cases to be run with the pytest framework. The pyunit tests can be run with the
         following command:</p>

      <kbd>cd Saxon.C.API/python-saxon</kbd>
      <kbd>pytest test_saxonc.py</kbd>

      <p>To help get started with Saxon/C and Python, the 'Saxon.C.API/python-saxon' directory also
         includes some python example scripts: saxon_example.py, saxon_example2.py and
         saxon_example3.py.</p>

      <p>Example Python script with Saxon/C API:</p>

      <samp><![CDATA[with saxonc.PySaxonProcessor(license=False) as proc:

  print(proc.version)
  #print(dir(proc))
  xdmAtomicval = proc.make_boolean_value(False)
  xsltproc = proc.new_xslt_processor()
  document = proc.parse_xml(xml_text="<out><person>text1</person><person>text2</person><person>text3</person></out>")
  xsltproc.set_source(xdm_node=document)
  xsltproc.compile_stylesheet(stylesheet_file="test2.xsl")
  xsltproc.set_just_in_time_compilation(True)
  output2 = xsltproc.transform_to_string()
  print(output2)
  print('test 0 \n')
  xml = """\
    <out>
      <person>text1</person>
      <person>text2</person>
      <person>text3</person>
    </out>"""
  xp = proc.new_xpath_processor()
  node = proc.parse_xml(xml_text=xml)
  print('test 1\n node='+node.string_value)
  xp.set_context(xdm_item=node)
  item = xp.evaluate_single('//person[1]')
  if isinstance(item,saxonc.PyXdmNode):
    print(item.string_value)
    ]]></samp>
   </section>
</article>
