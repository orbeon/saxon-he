<?xml version="1.0" encoding="UTF-8"?>
<section id="configuration" title="Configuration">

   <h1>Configuration</h1>

   <p>There are many parameters and options that can be set to control the way in which Saxon
      behaves. For a comprehensive guide to the Saxon configuration features see the <a
         href="http://saxonica.com/documentation/index.html#!configuration/config-features"
         target="_blank">Saxon 9.9 documentation</a>.</p>

   <h2 class="subtitle">Setting properties on the SaxonProcessor</h2>

   <p>In the Saxon/C API in C++, PHP and Python, these configuration features can be set at a global
      level when the <code>SaxonProcessor</code> is created, using the
         <code>setConfigurationProperty()</code> method. For example:</p>

   <samp><![CDATA[saxonProcessor->setConfigurationProperty("xsdversion", "1.1");

saxonProcessor->setConfigurationProperty("http://saxon.sf.net/feature/multipleSchemaImports",
  "on");]]></samp>

   <p>Note that there are some features that don't work or are under tested. For instance, 'bytecode
      generation' is not available.</p>

   <h2 class="subtitle">Setting properties on the specific processors</h2>

   <p>Alternatively, the configuration features can be set on the XSLT, XQuery, XPath or XML Schema
      processors (<code>XsltProcessor</code>, <code>XQueryProcessor</code>, etc.) created from the
      main <code>SaxonProcessor</code>. See the following sections for details about which
      properties and parameters can be configured in the different XSLT, XQuery, XPath or XML Schema
      processors, using the <code>setProperty()</code> and <code>setParameter()</code> methods.
      Depending on the specific processor the exact purpose of these methods may differ. Further
      details can be found in the <a href="/api">Saxon/C API documentation</a>.</p>

   <nav>
      <ul/>
   </nav>

   <section id="xslt" title="XSLT processors">
      <h1>XSLT processors</h1>

      <p>Details about parameters and properties which can be set on an <code>XsltProcessor</code>
         or <code>Xslt30Processor</code>.</p>

      <h3 class="codeTitle">setParameter(string $name, XdmValue $value)</h3>

      <table>
         <thead>
            <tr>
               <th>Name</th>
               <th>Example</th>
               <th>Description</th>
            </tr>
         </thead>
         <tr>
            <td>'node'</td>
            <td>
               <code>setParameter("node", xdmNodeObj)</code>
            </td>
            <td>
               <p>Sets the source document for transformation. We also accept the parameter names
                  'item'.</p>
            </td>
            <!-- TODO 'item' ?? what does that mean? -->
         </tr>
         <tr>
            <td>[parameter name]</td>
            <td>
               <code>setParameter("numParam", value1)</code>
            </td>
            <td>
               <p>Sets the value of a stylesheet parameter.</p>
            </td>
         </tr>
      </table>
      
      <h3 class="codeTitle">setProperty(string $name, string $propValue)</h3>

      <p>The properties are a subset to those specified for running XSLT from the <a
            href="http://www.saxonica.com/documentation/index.html#!using-xsl/commandline">command
            line</a>.</p>

      <table>
         <thead>
            <tr>
               <th>Name</th>
               <th>Example</th>
               <th>Description</th>
            </tr>
         </thead>
         <tr>
            <td>'![serialization property]'</td>
            <td>
               <code>setProperty("!INDENT","yes")</code>
            </td>
            <td>
               <p>Influence the serialization of the result XML. Serialization properties are
                  specified by name, preceded with an exclamation mark. See the Saxon 9.9 API
                  documentation for the class <a class="code"
                     href="http://saxonica.com/documentation/index.html#!javadoc/net.sf.saxon.s9api/Serializer/Property"
                     >Serializer.Property</a> for a full list of serialization properties.</p>
            </td>
         </tr>
         <tr>
            <td>'o'</td>
            <td>
               <code>setProperty("o", "output.xml")</code>
            </td>
            <td>
               <p>Sets the destination for the result of the transformation to the specified
                  filename.</p>
            </td>
         </tr>
         <tr>
            <td>'it'</td>
            <td>
               <code>setProperty("it", "name")</code>
            </td>
            <td>
               <p>Set the initial named template for the transformation by name.</p>
            </td>
         </tr>
         <tr>
            <td>'dtd'</td>
            <td>
               <code>setProperty("dtd", "true")</code>
            </td>
            <td>
               <p>Set whether or not DTD validation should be applied to documents loaded.</p>
            </td>
         </tr>
         <tr>
            <td>'im'</td>
            <td>
               <code>setProperty("im", "mode-name")</code>
            </td>
            <td>
               <p>Set the initial mode for the transformation.</p>
            </td>
         </tr>
         <tr>
            <td>'s'</td>
            <td>
               <code>setProperty("s", "filename")</code>
            </td>
            <td>
               <p>Identifies the source file or directory.</p>
            </td>
         </tr>
         <tr>
            <td>'resources'</td>
            <td>
               <code>setProperty("resources", "dir")</code>
            </td>
            <td>
               <p>Specifies the directory where the resources files are found.</p>
            </td>
         </tr>
         <tr>
            <td>'tunnel'</td>
            <td>
               <code>setProperty("tunnel", "true")</code>
            </td>
            <td>XSLT 3.0 only. Accepts the values "true", "false", "yes", "no". Set to true if the
               initial template parameter values are to be used for setting tunnel parameters; or
               false if they are to be used for non-tunnel parameters.</td>
         </tr>
         <tr>
            <td>'outvalue'</td>
            <td>
               <code>setProperty("outvalue", "true")</code>
            </td>
            <td>XSLT 3.0 only. Accepts the values "true", "false", "yes", "no". Set to true if the
               transform invocation methods are to return the raw <code>XdmValue</code> result,
               otherwise the result is returned as an <code>XdmNode</code> object with a Document
               node as its root.</td>
         </tr>
         <tr>
            <td>'extc'</td>
            <td>
               <code>setProperty("extc", "dir/saxonc")</code>
            </td>
            <td>
               <p>Specifies the full path to the Saxon/C API library for extension functions. (For
                  more information on extension functions, see <a href="/extensibility">Extension
                     Functions in C++/PHP</a>.)</p>
            </td>
         </tr>
         <tr>
            <td>'m'</td>
            <td>
               <code>setProperty("m", "")</code>
            </td>
            <td>The presence of this property creates a message listener which is available in the
               C/C++ API of Saxon/C.</td>
         </tr>
      </table>
   </section>

   <section id="xquery" title="XQuery processor">
      <h1>XQuery processor</h1>

      <p>Details about parameters and properties which can be set on an
         <code>XQueryProcessor</code>.</p>

      <h3 class="codeTitle">setParameter(string $name, XdmValue $value)</h3>

      <table>
         <thead>
            <tr>
               <th>Name</th>
               <th>Example</th>
               <th>Description</th>
            </tr>
         </thead>
         <tr>
            <td>'node'</td>
            <td>
               <code>setParameter("node", xdmNodeObj)</code>
            </td>
            <td>
               <p>Sets the source document for the query. We also accept the parameter names
                  'item'.</p>
            </td>
         </tr>
         <tr>
            <td>[parameter name]</td>
            <td>
               <code>setParameter("numParam", value1)</code>
            </td>
            <td>
               <p>Sets the value of an external variable defined in the query.</p>
            </td>
         </tr>
      </table>

      <h3 class="codeTitle">setProperty(string $name, string $propValue)</h3>

      <p>The properties are a subset to those specified for running XQuery from the <a
            href="http://www.saxonica.com/documentation/index.html#!using-xquery/commandline"
            target="_blank">command line</a>.</p>

      <table>
         <thead>
            <tr>
               <th>Name</th>
               <th>Example</th>
               <th>Description</th>
            </tr>
         </thead>
         <tr>
            <td>![serialization property]</td>
            <td>
               <code>setProperty("!INDENT","yes")</code>
            </td>
            <td>
               <p>Influence the serialization of the result XML. Serialization properties are
                  specified by name, preceded with an exclamation mark. See the Saxon 9.9 API
                  documentation for the class <a class="code"
                     href="http://saxonica.com/documentation/index.html#!javadoc/net.sf.saxon.s9api/Serializer/Property"
                     >Serializer.Property</a> for a full list of serialization properties.</p>
            </td>
         </tr>
         <tr>
            <td>'base'</td>
            <td>
               <code>setProperty("base", "/home/username/example")</code>
            </td>
            <td>
               <p>Set the static base URI for a query. This is used to resolve any relative URIs
                  appearing within a query.</p>
            </td>
         </tr>
         <tr>
            <td>'q'</td>
            <td>
               <code>setProperty("q", "filename")</code>
            </td>
            <td>
               <code>Identifies the file containing the query.</code>
            </td>
         </tr>
         <tr>
            <td>'qs'</td>
            <td>
               <code>setProperty("qs", "saxon:line-number((//person)[1])")</code>
            </td>
            <td>
               <p>Allows the query to be specified inline.</p>
            </td>
         </tr>
         <tr>
            <td>'o'</td>
            <td>
               <code>setProperty("o", "output.xml")</code>
            </td>
            <td>
               <p>Sets the destination for the result of the XQuery to the specified filename.</p>
            </td>
         </tr>
         <tr>
            <td>'dtd'</td>
            <td>
               <code>setProperty("dtd", "true")</code>
            </td>
            <td>
               <p>Set whether or not DTD validation should be applied to documents loaded.</p>
            </td>
         </tr>
         <tr>
            <td>'s'</td>
            <td>
               <code>setProperty("s", "filename")</code>
            </td>
            <td>
               <p>Identifies the source file or directory. Mandatory unless the -it option is
                  used.</p>
            </td>
         </tr>
         <tr>
            <td>'resources'</td>
            <td>
               <code>setProperty("resources", "dir")</code>
            </td>
            <td>
               <p>Specifies the directory where the resources files are found.</p>
            </td>
         </tr>
         <tr>
            <td>'sa'</td>
            <td>
               <code>setProperty("sa", "true")</code>
            </td>
            <td>
               <p>Invoke a schema-aware query. Requires Saxon-EE/C.</p>
            </td>
         </tr>
         <tr>
            <td>'extc'</td>
            <td>
               <code>setProperty("extc", "dir/saxonc")</code>
            </td>
            <td>
               <p>Specifies the full path to the Saxon/C API library for extension functions. (For
                  more information on extension functions, see <a href="/extensibility">Extension
                     Functions in C++/PHP</a>.)</p>
            </td>
         </tr>
      </table>
   </section>

   <section id="xpath" title="XPath processor">
      <h1>XPath processor</h1>

      <p>Details about parameters and properties which can be set on an
         <code>XPathProcessor</code>.</p>

      <h3 class="codeTitle">setParameter(string $name, XdmValue $value)</h3>

      <table>
         <thead>
            <tr>
               <th>Name</th>
               <th>Example</th>
               <th>Description</th>
            </tr>
         </thead>
         <tr>
            <td>'node'</td>
            <td>
               <code>setParameter("node", xdmNodeObj)</code>
            </td>
            <td>
               <p>Sets the source document for an XPath expression. We also accept the parameter
                  names 'item'.</p>
            </td>
         </tr>
         <tr>
            <td>[parameter name]</td>
            <td>
               <code>setParameter("numParam", value1)</code>
            </td>
            <td>
               <p>Sets the value of an external variable defined in the XPath expression.</p>
            </td>
         </tr>
      </table>

      <h3 class="codeTitle">setProperty(string $name, string $propValue)</h3>

      <table>
         <thead>
            <tr>
               <th>Name</th>
               <th>Example</th>
               <th>Description</th>
            </tr>
         </thead>
         <tr>
            <td>![serialization property]</td>
            <td>
               <code>setProperty("!INDENT","yes")</code>
            </td>
            <td>
               <p>Influence the serialization of the result XML. Serialization properties are
                  specified by name, preceded with an exclamation mark. See the Saxon 9.9 API
                  documentation for the class <a class="code"
                     href="http://saxonica.com/documentation/index.html#!javadoc/net.sf.saxon.s9api/Serializer/Property"
                     >Serializer.Property</a> for a full list of serialization properties.</p>
            </td>
         </tr>
         <tr>
            <td>'o'</td>
            <td>
               <code>setProperty("o", "output.xml")</code>
            </td>
            <td>
               <p>Sets the destination for the result of evaluating the XPath expression to the
                  specified filename.</p>
            </td>
         </tr>
         <tr>
            <td>'dtd'</td>
            <td>
               <code>setProperty("dtd", "true")</code>
            </td>
            <td>
               <p>Sets whether or not DTD validation should be applied to documents loaded.</p>
            </td>
         </tr>
         <tr>
            <td>'s'</td>
            <td>
               <code>setProperty("s", "filename")</code>
            </td>
            <td>
               <p>Identifies the source file or directory. Mandatory unless the -it option is
                  used.</p>
            </td>
         </tr>
         <tr>
            <td>'resources'</td>
            <td>
               <code>setProperty("resources", "dir")</code>
            </td>
            <td>
               <p>Specifies the directory where the resources files are found.</p>
            </td>
         </tr>
         <tr>
            <td>'extc'</td>
            <td>
               <code>setProperty("extc", "dir/saxonc")</code>
            </td>
            <td>
               <p>Specifies the full path to the Saxon/C API library for extension functions. (For
                  more information on extension functions, see <a href="/extensibility">Extension
                     Functions in C++/PHP</a>.)</p>
            </td>
         </tr>
      </table>
   </section>

   <section id="schema" title="Schema Validator">
      <h1>Schema Validator</h1>

      <p>Details about parameters and properties which can be set on a
         <code>SchemaValidator</code>.</p>

      <h3 class="codeTitle">setParameter(string $name, XdmValue $value)</h3>

      <table>
         <thead>
            <tr>
               <th>Name</th>
               <th>Example</th>
               <th>Description</th>
            </tr>
         </thead>
         <tr>
            <td>'node'</td>
            <td>
               <code>setParameter("node", xdmNodeObj)</code>
            </td>
            <td>
               <p>Sets the source document for the validation. We also accept the parameter names
                  'item'.</p>
            </td>
         </tr>
         <tr>
            <td>[parameter name]</td>
            <td>
               <code>setParameter("numParam", value1)</code>
            </td>
            <td>
               <p>Sets the value of external variable defined in the schema.</p>
            </td>
            <!-- TODO check -->
         </tr>
      </table>

      <h3 class="codeTitle">setProperty(string $name, string $propValue)</h3>

      <p>The properties are a subset to those specified for running the Schema Validator from the <a
            href="http://www.saxonica.com/documentation/index.html#!schema-processing/commandline"
            target="_blank">command line</a>.</p>

      <table>
         <thead>
            <tr>
               <th>Name</th>
               <th>Example</th>
               <th>Comment</th>
            </tr>
         </thead>
         <tr>
            <td>![serialization property]</td>
            <td>
               <code>setProperty("!INDENT","yes")</code>
            </td>
            <td>
               <p>Influence the serialization of the result XML. Serialization properties are
                  specified by name, preceded with an exclamation mark. See the Saxon 9.9 API
                  documentation for the class <a class="code"
                     href="http://saxonica.com/documentation/index.html#!javadoc/net.sf.saxon.s9api/Serializer/Property"
                     >Serializer.Property</a> for a full list of serialization properties.</p>
            </td>
         </tr>
         <tr>
            <td>'o'</td>
            <td>
               <code>setProperty("o", "output.xml")</code>
            </td>
            <td>
               <p>Sets the destination for the result of the validation to the specified
                  filename.</p>
            </td>
         </tr>
         <tr>
            <td>'string'</td>
            <td>
               <code>setProperty("string", [xml-string])</code>
            </td>
            <td>
               <p>Sets the source document for validation as a string. Parsing will happen when the
                  validate method has been called.</p>
            </td>
         </tr>
         <tr>
            <td>'dtd'</td>
            <td>
               <code>setProperty("dtd", "true")</code>
            </td>
            <td>
               <p>Set whether or not DTD validation should be applied to documents loaded.</p>
            </td>
         </tr>
         <tr>
            <td>'s'</td>
            <td>
               <code>setProperty("s", "filename")</code>
            </td>
            <td>
               <p>Identifies the source file or directory. Mandatory unless the -it option is
                  used.</p>
            </td>
         </tr>
         <tr>
            <td>'resources'</td>
            <td>
               <code>setProperty("resources", "dir")</code>
            </td>
            <td>
               <p>Specifies the directory where the resources files are found.</p>
            </td>
         </tr>
         <tr>
            <td>'report-node'</td>
            <td>
               <code>setProperty("report-node", "true")</code>
            </td>
            <td>
               <p>Switches on the validation reporting feature. Validation failure errors are
                  represented in an XML document.</p>
            </td>
         </tr>
         <tr>
            <td>'report-file'</td>
            <td>
               <code>setProperty("report-file", "filename")</code>
            </td>
            <td>
               <p>Switches on the validation reporting feature. Validation failure errors are
                  collected and saved in an XML file.</p>
            </td>
         </tr>
         <tr>
            <td>'verbose'</td>
            <td>
               <code>setProperty("verbose", "true")</code>
            </td>
            <td>
               <p>Set verbose mode to output to the terminal validation exceptions. The default is
                  on providing the reporting feature has not been enabled.</p>
            </td>
         </tr>
         <tr>
            <td>'element-type'</td>
            <td>
               <code>setProperty("element-type", "{uri}local")</code>
            </td>
            <td>
               <p>Set the name of the required type of the top-level element of the document to be
                  validated. The string should be in the Clark notation: {uri}local.</p>
            </td>
         </tr>
         <tr>
            <td>'element-name'</td>
            <td>
               <code>setProperty("element-name", "{uri}local")</code>
            </td>
            <td>
               <p>Set the name of the required top-level element of the document to be validated
                  (that is, the name of the outermost element of the document). The string should be
                  in the Clark notation: {uri}local.</p>
            </td>
         </tr>
         <tr>
            <td>'lax'</td>
            <td>
               <code>setProperty("lax", "true")</code>
            </td>
            <td>
               <p>The validation mode may be either strict or lax. The default is strict. This
                  property indicates that lax validation is required.</p>
            </td>
         </tr>
      </table>
   </section>
</section>
