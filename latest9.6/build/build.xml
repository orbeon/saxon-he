<?xml version="1.0" encoding="UTF-8"?>

<project basedir="." default="all" name="Saxon: The XSLT and XQuery Processor"
    xmlns:dn="antlib:org.apache.ant.dotnet" xmlns:if="ant:if" xmlns:unless="ant:unless">

    <!-- note : Ant 1.9.1 is needed for this script -->

    <!-- Ant 1.9.1 supports the use of @ant:if and @ant:unless conditional attributes
         which are used for alternatives, currently in ICU building and documentation generation -->

    <!-- The use of ant:if and ant:unless requires Ant 1.9.1 -
        for IntelliJ the built-in is 1.8.2, but an external Ant can be configured on the Ant menu  -->

    <!-- note : Ant 1.7 is needed for this script -->

    <!-- Ant 1.7 introduces a <service> element to allow META-INF/services
         directories to be created in JAR files. Unfortunately it is broken,
         see http://issues.apache.org/bugzilla/show_bug.cgi?id=41201. The relevant
         code here is retained in the form of comments, and can be reinstated
         when the bug is fixed. Meanwhile the directories are created manually -->

    <!-- Build file for Saxon. This builds all six for the released products:
         Saxon-HE, -PE, and -EE, on both the Java and .NET platforms. It also builds
         the released resources file. A full build requires access to Saxonica
         proprietary source code. The open source Saxon-HE product can be built for
         Java using target "hej"; but building Saxon-HE for .NET may require some
         disentangling of tasks that depend on Saxon-EE code being present. -->

    <!-- Useful targets:
    
         prepare      clears temporary directories, generates fixed files
         j            builds executables for Saxon on Java
         n            builds executables for Saxon on .NET
         build        builds all executables
         resources    builds samples and documentation
         release      builds ZIP files for published downloads, runs regression tests
         archive      produces a back-up archive  -->


    <!-- Naming conventions:
         -n   : .NET
         -j   : Java
         -he  : Home Edition
         -pe  : Professional Edition
         -ee  : Enterprise Edition
         combined as appropriate, so -pej denotes Saxon-PE on the Java platform
    -->

    <import file="build-constants.xml"/>
    <import file="samples-common.xml"/>
    <import file="testing-j.xml"/>


    <!-- If building for only one platform, 
       (a) remove one of the imports below
       (b) remove dependencies on targets in that build file, which are always suffixed -j or -n respectively 
    -->

    <import file="build-j.xml"/>
    <import file="build-n.xml"/>
    <import file="test-j.xml"/>
    <import file="test-n.xml"/>


    <!-- Saxon used for some late-stage operations, noteably documentation generation -->
    <property name="use.EE" value="false" description="Use -EE for documentation, otherwise PE"/>
    <property if:true="${use.EE}" name="saxon.edition" value="Enterprise"
        description="Enterprise Saxon"/>
    <property unless:true="${use.EE}" name="saxon.edition" value="Professional"
        description="Professional Saxon"/>


    <path id="saxon.class.path">
        <fileset if:true="${use.EE}" dir="${product.dir}/eej">
            <include name="*.jar"/>
        </fileset>
        <fileset unless:true="${use.EE}" dir="${product.dir}/pej">
            <include name="*.jar"/>
        </fileset>
        <!-- <pathelement path="${lib.dir}"/>-->
        <!--<pathelement path="${product.dir}/eej"/>-->
    </path>

    <path id="saxonee.class.path">
        <!-- <pathelement path="${lib.dir}"/>-->
        <pathelement path="${product.dir}/eej"/>
    </path>



    <target name="clean" description="Clean all files other than source code and downloaded jars.">
        <delete dir="${temp.dir}"/>
        <delete dir="${product.dir}"/>
        <mkdir dir="${product.dir}"/>
    </target>

    <target name="prepare" description="Create 'fixed' files in build libraries"
        depends="clean, prepare-n, prepare-j"/>


    <!-- The Saxonica build creates a cross-platform samples directory, but it's separated
         by platform in case a platform-specific build is needed -->


    <!--REMOVE COMMENT to incldue dotnet  <target name="samples" depends="samples-j, samples-n"/>  -->
     <target name="samples" depends="samples-j"/>
    <!-- Expand the documentation sections from inclusions
    Note that the 'output' parameter is important - this stylesheet produces result documents
    which Ant DOES NOT automatically place relative to the 'out' location - that appears to be a pipe
    outside XSLT.
     Also note of course that the main catalog.xml file is 'touched' to make sure that a re-run will be forced -->

    <macrodef name="EXPath-doc"
        description="Expand EXPath functional documentation. This links to GitHub">
        <attribute name="target"/>
        <sequential>
            <xslt in="${userdoc.dir}/src/functions/EXPath/functions-@{target}.xml"
                out="${userdoc.dir}/src/functions/EXPath/functions-@{target}-expanded.xml"
                style="${userdoc.dir}/style/genFunctionDoc.xsl" classpathref="saxon.class.path">
                <param name="GitHub" expression="${GitHub.dir}"/>
                <factory name="com.saxonica.config.${saxon.edition}TransformerFactory">
                    <attribute name="http://saxon.sf.net/feature/licenseFileLocation"
                        value="${saxon.license}"/>
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware" value="true"/>
                </factory>
            </xslt>
        </sequential>
    </macrodef>
    <macrodef name="Element-doc"
              description="Expand XSLT Element Reference and Extensions documentation">
        <attribute name="target"/>
        <sequential>
            <xslt in="${userdoc.dir}/src/extensions/@{target}-src.xml"
                  out="${userdoc.dir}/src/extensions/@{target}-expanded.xml"
                  style="${userdoc.dir}/style/elements-body.xsl" classpathref="saxon.class.path">
                <factory name="com.saxonica.config.${saxon.edition}TransformerFactory">
                    <attribute name="http://saxon.sf.net/feature/licenseFileLocation"
                               value="${saxon.license}"/>
                    <!-- Bug 2126 may require byte code suppression - remove this when fixed -->
                    <attribute name="http://saxon.sf.net/feature/optimizationLevel" value="0"/>
                </factory>
            </xslt>
        </sequential>
    </macrodef>
    <target name="gen-doc"
        description="Collects up, generates and copies the documentation source into the canonical location">
        <!--<diagnostics/>-->
        <echo message="Using Saxon ${saxon.edition} Edition"/>
        <echo message="License file: ${saxon.license}"/>

        <!-- Generate the ICU/UCA documentation which involves self-inspection extension functions -->
        <xslt in="${userdoc.dir}/src/catalog.xml" out="${userdoc.dir}/src/extensibility/temp.xml"
            style="${userdoc.dir}/style/document-ICU.xsl" classpathref="saxon.class.path">
            <param name="output" expression="extensibility/catalog.xml"/>
            <factory name="com.saxonica.config.${saxon.edition}TransformerFactory">
                <attribute name="http://saxon.sf.net/feature/licenseFileLocation"
                    value="${saxon.license}"/>
                <attribute name="http://saxon.sf.net/feature/initialTemplate" value="go"/>
                <!--<attribute if:true="${use.EE}" name="http://saxon.sf.net/feature/trace-external-functions" value="true"/>-->
                <!-- Bug 2126 may require byte code suppression - remove this when fixed -->
                <attribute name="http://saxon.sf.net/feature/optimizationLevel" value="0"/>
            </factory>
        </xslt>

        <!-- Generate the XSLT Element reference documentation -->
        <xslt in="${userdoc.dir}/src/elements/xsl-elements-src.xml" out="${userdoc.dir}/src/elements/xsl-elements-expanded.xml"
              style="${userdoc.dir}/style/genElementDoc.xsl" classpathref="saxon.class.path">
            <factory name="com.saxonica.config.${saxon.edition}TransformerFactory">
                <attribute name="http://saxon.sf.net/feature/licenseFileLocation"
                           value="${saxon.license}"/>
                <!-- Bug 2126 may require byte code suppression - remove this when fixed -->
                <attribute name="http://saxon.sf.net/feature/optimizationLevel" value="0"/>
            </factory>
        </xslt>

        <xslt in="${userdoc.dir}/src/elements/xsl-elements-expanded.xml" out="${userdoc.dir}/src/xsl-elements.xml"
              style="${userdoc.dir}/style/elements-body.xsl" classpathref="saxon.class.path">
            <factory name="com.saxonica.config.${saxon.edition}TransformerFactory">
                <attribute name="http://saxon.sf.net/feature/licenseFileLocation"
                           value="${saxon.license}"/>
                <!-- Bug 2126 may require byte code suppression - remove this when fixed -->
                <attribute name="http://saxon.sf.net/feature/optimizationLevel" value="0"/>
            </factory>
        </xslt>

        <!-- Generate the Extensions documentation: instructions, serialization parameters, Saxon SQL Extension -->
        <Element-doc target="instructions"/>
        <Element-doc target="serialization-params"/>
        <Element-doc target="sql-extension"/>
        <copy file="${userdoc.dir}/src/extensions/sql-extension-expanded.xml"
                tofile="${userdoc.dir}/src/sql-extension.xml">
        </copy>

        <!-- Expand the EXPath documentation -->
        <EXPath-doc target="binary"/>
        <EXPath-doc target="archive"/>
        <EXPath-doc target="file"/>

        <xslt in="${userdoc.dir}/src/catalog.xml" out="${userdoc.dir}/viewer_app/doc/catalog.xml"
            style="${userdoc.dir}/style/doc-include.xsl" classpathref="saxon.class.path">
            <param name="output" expression="../viewer_app/doc/catalog.xml"/>
            <factory name="com.saxonica.config.${saxon.edition}TransformerFactory">
                <attribute name="http://saxon.sf.net/feature/licenseFileLocation"
                    value="${saxon.license}"/>
                <attribute name="http://saxon.sf.net/feature/xinclude-aware" value="true"/>
            </factory>
        </xslt>
        <!-- This touch ensures that gen-doc will run again on a subsequent invocation 
            even if the catalog itself hasn't been modified, which is the normal case. 
            It's the resources that it points to that are much more likely to change -->
        <touch file="${userdoc.dir}/src/catalog.xml"/>
    </target>


    <target name="userdoc-html"
        description="Creates the static HTML version of the user documentation">
        <mkdir dir="${temp.dir}/tempdoc"/>

        <!-- Preprocess the changes.xml file to turn it into a standard article -->

        <xslt in="${userdoc.dir}/viewer_app/doc/changes.xml"
            out="${userdoc.dir}/viewer_app/doc/changes-article.xml"
            style="${userdoc.dir}/to-static/c-changes.xsl">
            <classpath refid="saxon.class.path"/>
            <factory name="com.saxonica.config.EnterpriseTransformerFactory"/>
        </xslt>

        <!-- Preprocess the functions.xml file to turn it into a standard article -->

        <xslt in="${userdoc.dir}/viewer_app/doc/functions.xml"
            out="${userdoc.dir}/viewer_app/doc/functions-article.xml"
            style="${userdoc.dir}/to-static/c-functions.xsl" destdir="${temp.dir}/tempdoc" >
            <classpath refid="saxon.class.path"/>
            <factory name="com.saxonica.config.EnterpriseTransformerFactory"/>

        </xslt>

        <!-- Now process all the articles -->

       <xslt in="${userdoc.dir}/viewer_app/doc/catalog.xml" out="${userdoc.dir}/out/dummy.xml"
            style="${userdoc.dir}/to-static/s-cetree.xsl" destdir="${temp.dir}/tempdoc">
            <classpath refid="saxon.class.path"/>
            <factory name="com.saxonica.config.EnterpriseTransformerFactory"/>
            <param name="changes-article" expression="../viewer_app/doc/changes-article.xml"/>
            <param name="functions-article" expression="../viewer_app/doc/functions-article.xml"/>
           <param name="base-uri" expression="${userdoc.dir}/viewer_app/html"/>
        </xslt>
        <copy file="${userdoc.dir}/viewer_app/cetree.css" tofile="${userdoc.dir}/viewer_app/html/cetree.css"/>

        <!-- remove empty output file -->
        <delete file="${userdoc.dir}/out/dummy.xml"/>
        <delete file="${userdoc.dir}/doc/changes-article.xml"/>
        <delete file="${userdoc.dir}/doc/functions-article.xml"/>
    </target>


    <target name="release-userdoc" description="Generate User Documentation" depends="userdoc-html">
        <copy todir="${build-resources.dir}/doc">
            <fileset dir="${userdoc.dir}/fixed"/>
        </copy>
        <copy todir="${build-resources.dir}/doc">
            <fileset dir="${userdoc.dir}/style">
                <include name="make-menu.xsl"/>
            </fileset>
        </copy>
        <copy todir="${product.dir}/hej">
            <fileset dir="${userdoc.dir}/welcome">
                <include name="doc/**"/>
                <include name="notices/CERN.txt"/>
                <include name="notices/JAMESCLARK.txt"/>
                <include name="notices/LICENSE.txt"/>
                <include name="notices/THAI.txt"/>
                <include name="notices/UNICODE.txt"/>
            </fileset>
        </copy>
        <copy todir="${product.dir}/pej">
            <fileset dir="${userdoc.dir}/welcome">
                <include name="doc/**"/>
                <include name="notices/CERN.txt"/>
                <include name="notices/ICU-J.txt"/>
                <include name="notices/JAMESCLARK.txt"/>
                <include name="notices/LICENSE.txt"/>
                <include name="notices/THAI.txt"/>
                <include name="notices/UNICODE.txt"/>
            </fileset>
        </copy>
        <copy todir="${product.dir}/eej">
            <fileset dir="${userdoc.dir}/welcome">
                <include name="doc/**"/>
                <include name="notices/ASM.txt"/>
                <include name="notices/CERN.txt"/>
                <include name="notices/ICU-J.txt"/>
                <include name="notices/JAMESCLARK.txt"/>
                <include name="notices/LICENSE.txt"/>
                <include name="notices/THAI.txt"/>
                <include name="notices/UNICODE.txt"/>
            </fileset>
        </copy>
        <copy todir="${product.dir}/hen">
            <fileset dir="${userdoc.dir}/welcome">
                <include name="doc/**"/>
                <include name="notices/CERN.txt"/>
                <include name="notices/JAMESCLARK.txt"/>
                <include name="notices/LICENSE.txt"/>
                <include name="notices/THAI.txt"/>
                <include name="notices/UNICODE.txt"/>
                <include name="notices/APACHE-XERCES.txt"/>
                <include name="notices/APACHE-RESOLVER.txt"/>
                <include name="notices/FRIJTERS.txt"/>
                <include name="notices/GPL+CLASSPATH.txt"/>
            </fileset>
        </copy>
        <copy todir="${product.dir}/pen">
            <fileset dir="${userdoc.dir}/welcome">
                <include name="doc/**"/>
                <include name="notices/CERN.txt"/>
                <include name="notices/ICU-J.txt"/>
                <include name="notices/JAMESCLARK.txt"/>
                <include name="notices/LICENSE.txt"/>
                <include name="notices/THAI.txt"/>
                <include name="notices/UNICODE.txt"/>
                <include name="notices/APACHE-XERCES.txt"/>
                <include name="notices/APACHE-RESOLVER.txt"/>
                <include name="notices/FRIJTERS.txt"/>
                <include name="notices/GPL+CLASSPATH.txt"/>
            </fileset>
        </copy>
        <copy todir="${product.dir}/een">
            <fileset dir="${userdoc.dir}/welcome">
                <include name="doc/**"/>
                <include name="notices/ASM.txt"/>
                <include name="notices/CERN.txt"/>
                <include name="notices/ICU-J.txt"/>
                <include name="notices/JAMESCLARK.txt"/>
                <include name="notices/LICENSE.txt"/>
                <include name="notices/THAI.txt"/>
                <include name="notices/UNICODE.txt"/>
                <include name="notices/APACHE-XERCES.txt"/>
                <include name="notices/APACHE-RESOLVER.txt"/>
                <include name="notices/FRIJTERS.txt"/>
                <include name="notices/GPL+CLASSPATH.txt"/>
            </fileset>
        </copy>
        <!--<dependset>
          <! rerun the XSLT transformations if any input files have changed >
          <srcfilelist
             dir   = "${userdoc.dir}/src/"
             files = "*.xml"/>
          <srcfilelist
             dir   = "${userdoc.dir}/style/"
             files = "*.xsl"/>
          <targetfileset
             dir      = "${product.dir}/resources/doc/"
             includes = "dummy.html"/>
          <targetfileset
             dir      = "${userdoc.dir}/src/"
             includes = "functions.xml"/>
          <targetfileset
             dir      = "${userdoc.dir}/src/"
             includes = "index-entries.xml, FeatureKeysDoc.xml"/>
      </dependset>
        <xslt in="${userdoc.dir}/src/function-data2.xml"
              style="${userdoc.dir}/style/preprocess-functions2.xsl"
              out="${userdoc.dir}/src/functions.xml"
              >
              <factory name="com.saxonica.config.EnterpriseTransformerFactory">
                  <attribute name="http://saxon.sf.net/feature/timing" value="true"/>
                  <attribute name="http://saxon.sf.net/feature/xsltSchemaAware" value="true"/>
                  <attribute name="http://saxon.sf.net/feature/schema-validation-mode" value="strict"/>
                  <attribute name="http://saxon.sf.net/feature/xsd-version" value="1.1"/>
              </factory>
        </xslt>
        <xslt in="${userdoc.dir}/src/catalog.xml"
              style="${userdoc.dir}/style/index-builder.xsl"
              out="${userdoc.dir}/src/index-entries.xml"
              >
              <factory name="com.saxonica.config.EnterpriseTransformerFactory">
                  <attribute name="http://saxon.sf.net/feature/xsltSchemaAware" value="true"/>
                  <attribute name="http://saxon.sf.net/feature/schema-validation-mode" value="strict"/>
                  <attribute name="http://saxon.sf.net/feature/xsd-version" value="1.1"/>
              </factory>
        </xslt><!-\-classpath=".;../output/saxon-build/9.3.0.6/eej/saxon9ee.jar;../saxon-licenses"-\->
        <xslt in="${userdoc.dir}/src/FeatureKeys.xml"
              style="${userdoc.dir}/style/FeatureKeysToDoc.xsl"
              out="${userdoc.dir}/src/FeatureKeysDoc.xml"
              >
              <factory name="com.saxonica.config.EnterpriseTransformerFactory">
                  <attribute name="http://saxon.sf.net/feature/xsltSchemaAware" value="true"/>
                  <attribute name="http://saxon.sf.net/feature/schema-validation-mode" value="lax"/>
                  <attribute name="http://saxon.sf.net/feature/xsd-version" value="1.1"/>
              </factory>
        </xslt>
        <xslt in="${userdoc.dir}/src/catalog.xml"
              style="${userdoc.dir}/style/page-splitter.xsl"
              out="${product.dir}/resources/doc/dummy.html"
              >
              <factory name="com.saxonica.config.EnterpriseTransformerFactory">
                  <attribute name="http://saxon.sf.net/feature/xsltSchemaAware" value="true"/>
                  <attribute name="http://saxon.sf.net/feature/timing" value="true"/>
                  <attribute name="http://saxon.sf.net/feature/schema-validation-mode" value="lax"/>
                  <attribute name="http://saxon.sf.net/feature/xsd-version" value="1.1"/>
                  <attribute name="http://saxon.sf.net/feature/recognize-uri-query-parameters" value="true"/>
              </factory>
        </xslt>-->

        <zip zipfile="${build-resources.dir}/source-userdoc.zip">
            <fileset dir="${userdoc.dir}">
                <include name="**/*.xml"/>
                <include name="**/*.xsl"/>
                <include name="**/*.xsd"/>
                <include name="**/*.css"/>
                <include name="fixed/**"/>
                <include name="welcome/**"/>
            </fileset>
        </zip>
    </target>

   <!-- EMOVE COMMENT to include dotnet  <target name="release-source" description="Generate Zip file containing issued Source Code">
        <zip zipfile="${product.dir}/saxon${versionh}source.zip">
            <fileset dir="${source-hej.dir}">
                <include name="net/**/*.java"/>
                <include name="net/**/package.html"/>
            </fileset>
            <fileset dir="${temp-src-nc.dir}">
                <include name="api/**/*.cs"/>
                <include name="cmd/**/*.cs"/>
            </fileset>
        </zip>
        <zip zipfile="${repo-priv}/releases/saxonee${versionh}source.zip">
            <fileset dir="${source-eej.dir}">
                <include name="com/saxonica/**/*.java"/>
                <include name="com/saxonica/**/package.html"/>
            </fileset>
        </zip>
    </target>  -->


     <target name="release-source" description="Generate Zip file containing issued Source Code">
        <zip zipfile="${product.dir}/saxon${versionh}source.zip">
            <fileset dir="${source-hej.dir}">
                <include name="net/**/*.java"/>
                <include name="net/**/package.html"/>
            </fileset>

        </zip>
        <zip zipfile="${repo-priv}/releases/saxonee${versionh}source.zip">
            <fileset dir="${source-eej.dir}">
                <include name="com/saxonica/**/*.java"/>
                <include name="com/saxonica/**/package.html"/>
            </fileset>
              <fileset dir="${source-hej.dir}">
                <include name="net/**/*.java"/>
                <include name="net/**/package.html"/>
            </fileset>
        </zip>
    </target>

    <target name="NO-resources" depends="release-source, release-userdoc"/>

    <!--REMOVE COMMENT to include dotnet <target name="resources" description="Generate contents of released resources file"
        depends="release-userdoc, product-javadoc, product-dotnetdoc,
      	         samples, samples-j, testdrivers-j,  release-source">   -->

        <target name="resources" description="Generate contents of released resources file"
        depends="release-userdoc, product-javadoc,
      	         samples, samples-j, testdrivers-j,  release-source">
        <!-- samples-n, -->
        <mkdir dir="${product.dir}/resources/build"/>
        <copy todir="${product.dir}/resources/build">
            <fileset dir="${basedir}">
                <include name="build.xml"/>
                <include name="build-n.xml"/>
                <include name="build-j.xml"/>
                <include name="build-constants.xml"/>
                <include name="test-j.xml"/>
                <include name="test-n.xml"/>

            </fileset>
        </copy>
        <copy todir="${product.dir}/resources">
            <fileset dir="${userdoc.dir}/welcome">
                <include name="notices/**"/>
            </fileset>
        </copy>
    </target>

   <!-- REMOVE COMMENT to include dotnet <target name="build" description="Complete Saxon product build" depends="j, n"/> -->
    <target name="build" description="Complete Saxon product build" depends="j"/>

    <!-- REMOVE COMMENT to include dotnet <target name="test" description="Run regression tests" depends="test-j, test-n"/> -->
    <target name="test" description="Run regression tests" depends="test-j, test-n"/>

    <!--REMOVE COMMENT to include dotnet and resources <target name="release" description="Create .ZIP files for release"
        depends="build, release-j, release-n, resources">  -->
    <target name="release" description="Create .ZIP files for release"
        depends="build, release-j">

        <!-- removed "resources" - not used in maintenance releases -->
        <!-- TODO add test -->

        <mkdir dir="${issue.dir}"/>
        <!-- <zip zipfile="${issue.dir}/saxonhe${versionh}j.zip">
          <fileset dir="${product.dir}/hej"/>
        </zip>
        <zip zipfile="${issue.dir}/saxonhe${versionh}n.zip">
          <fileset dir="${product.dir}/hen"/>
        </zip>
        <zip zipfile="${issue.dir}/saxonpe${versionh}j.zip">
          <fileset dir="${product.dir}/pej"/>
        </zip>
        <zip zipfile="${issue.dir}/saxonpe${versionh}n.zip">
          <fileset dir="${product.dir}/pen"/>
        </zip>
        <zip zipfile="${issue.dir}/saxonee${versionh}j.zip">
          <fileset dir="${product.dir}/eej"/>
        </zip>
        <zip zipfile="${issue.dir}/saxonee${versionh}n.zip">
          <fileset dir="${product.dir}/een"/>
        </zip>-->
        <zip zipfile="${issue.dir}/saxon-resources${major.versionh}.zip">
            <fileset dir="${product.dir}/resources"/>
        </zip>
        <copy file="${product.dir}/saxon${versionh}source.zip" todir="${issue.dir}"/>
    </target>

    <target name="archive" description="Archive everything needed for backup">
        <mkdir dir="${archive.dir}"/>
        <copy file="archive-contents.txt" todir="${archive.dir}"/>
        <replace file="${archive.dir}/archive-contents.txt" token="N-N-N-N" value="${version}"
            summary="yes"/>
        <copy todir="${archive.dir}">
            <fileset dir="${issue.dir}"/>
            <fileset dir="${source-eej.dir}" includes="saxonee${version}source.zip"/>
            <fileset dir="${build-resources.dir}" includes="saxon${version}source.zip"/>
        </copy>
        <zip zipfile="${archive.dir}/testsuite.zip">
            <fileset dir="e:/tests">
                <include name="testsuite/**"/>
                <include name="gold/**"/>
            </fileset>
        </zip>
        <zip zipfile="${archive.dir}/schematests.zip">
            <fileset dir="e:/tests">
                <include name="xmlschema2006-11-06/**"/>
                <exclude name="xmlschema2006-11-06/msData/**"/>
                <exclude name="xmlschema2006-11-06/sunData/**"/>
                <exclude name="xmlschema2006-11-06/nistData/**"/>
            </fileset>
        </zip>
        <zip zipfile="${archive.dir}/querytests.zip">
            <fileset dir="e:/tests/xqts-extra"/>
            <fileset dir="e:/xqts/saxon">
                <exclude name="results/**"/>
                <exclude name="results.net/**"/>
                <exclude name="**/java/**"/>
            </fileset>
            <fileset dir="e:/xquts/saxon">
                <exclude name="results/**"/>
                <exclude name="results.net/**"/>
            </fileset>
        </zip>
        <zip zipfile="${archive.dir}/xslttests.zip">
            <fileset dir="e:/xslts-extra"/>
            <fileset dir="e:/xslt20-test/TestSuiteStagingArea/SaxonResults">
                <include name="*.xml"/>
                <include name="*.xsl"/>
            </fileset>
            <fileset dir="e:/xslt20-test/TestSuiteStagingArea/SaxonResults.Net">
                <include name="*.xml"/>
                <include name="*.xsl"/>
            </fileset>
        </zip>
        <zip zipfile="${archive.dir}/javatests.zip">
            <fileset dir="c:/MyJava/testcode"/>
        </zip>
        <zip zipfile="${archive.dir}/doc.zip">
            <fileset dir="c:/MyJava/doc"/>
        </zip>
        <zip zipfile="${archive.dir}/licensetool.zip">
            <fileset dir="c:/MyJava/licensetool"/>
        </zip>
        <zip zipfile="${archive.dir}/dotnetmake.zip">
            <fileset dir="c:/MyDotNet/make"/>
        </zip>
        <zip zipfile="${archive.dir}/licenses.zip">
            <fileset dir="c:/saxon-licenses">
                <exclude name="archived-licenses/**"/>
                <exclude name="licenses/**"/>
            </fileset>
        </zip>
        <zip zipfile="${archive.dir}/build.zip">
            <fileset dir="c:/MyJava/build">
                <exclude name="c:/MyJava/build/temp/**"/>
            </fileset>
        </zip>
    </target>


</project>
